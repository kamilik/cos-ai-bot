package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"cos-ai-bot/internal/database"
	"cos-ai-bot/internal/models"
	"cos-ai-bot/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var userStates = make(map[int64]*models.UserState)        // userID -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã (fallback)
var recommendationService *services.RecommendationService // —Å–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

// deleteMessage —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func deleteMessage(bot *tgbotapi.BotAPI, chatID int64, messageID int) {
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	bot.Send(deleteMsg)
}

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
var valueMapping = map[string]string{
	// –¢–∏–ø—ã –∫–æ–∂–∏
	"skin_dry":       "–°—É—Ö–∞—è",
	"skin_oily":      "–ñ–∏—Ä–Ω–∞—è",
	"skin_normal":    "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è",
	"skin_sensitive": "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è",
	"skin_combined":  "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
	"skin_unknown":   "–ù–µ –∑–Ω–∞—é",

	// –í–æ–∑—Ä–∞—Å—Ç
	"age_18_minus": "–î–æ 18 –ª–µ—Ç",
	"age_18_24":    "18-24 –≥–æ–¥–∞",
	"age_25_34":    "25-34 –≥–æ–¥–∞",
	"age_35_44":    "35-44 –≥–æ–¥–∞",
	"age_45_plus":  "45+ –ª–µ—Ç",
	"age_ignore":   "–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å",

	// –ü–æ–ª
	"gender_male":   "–ú—É–∂—á–∏–Ω–∞",
	"gender_female": "–ñ–µ–Ω—â–∏–Ω–∞",
	"gender_other":  "–î—Ä—É–≥–æ–µ",
	"gender_ignore": "–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å",

	// –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å/–ª–∞–∫—Ç–∞—Ü–∏—è
	"pregnancy":               "–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å",
	"lactation":               "–õ–∞–∫—Ç–∞—Ü–∏—è",
	"pregnancy_and_lactation": "–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –ª–∞–∫—Ç–∞—Ü–∏—è",
	"none_of_above":           "–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ",
	"pregnancy_ignore":        "–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å",

	// –¶–µ–ª–∏
	"goal_hydration":  "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∏ –ø–∏—Ç–∞–Ω–∏–µ",
	"goal_tone":       "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–æ–Ω–∞",
	"goal_antiage":    "–ê–Ω—Ç–∏–≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —É—Ö–æ–¥",
	"goal_texture":    "–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã",
	"goal_refresh":    "–û—Å–≤–µ–∂–∏—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å",
	"goal_minimalism": "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º, —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —É—Ö–æ–¥",
	"goal_other":      "–î—Ä—É–≥–æ–µ",

	// –ë—é–¥–∂–µ—Ç
	"budget_low":     "–î–æ 1000‚ÇΩ",
	"budget_medium":  "1000-3000‚ÇΩ",
	"budget_high":    "3000-5000‚ÇΩ",
	"budget_premium": "5000‚ÇΩ+",
	"budget_ignore":  "–ù–µ –≤–∞–∂–Ω–æ",

	// –ê–ª–ª–µ—Ä–≥–∏–∏
	"allergies_none":          "–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π",
	"allergies_nickel":        "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –Ω–∏–∫–µ–ª—å",
	"allergies_lanolin":       "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –ª–∞–Ω–æ–ª–∏–Ω",
	"allergies_fragrance":     "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ç–¥—É—à–∫–∏",
	"allergies_preservatives": "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç—ã",
	"allergies_other":         "–î—Ä—É–≥–æ–µ",

	// –ö–ª–∏–º–∞—Ç
	"climate_dry":       "–°—É—Ö–æ–π",
	"climate_humid":     "–í–ª–∞–∂–Ω—ã–π",
	"climate_hot":       "–ñ–∞—Ä–∫–∏–π",
	"climate_cold":      "–•–æ–ª–æ–¥–Ω—ã–π",
	"climate_temperate": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–π / —É–º–µ—Ä–µ–Ω–Ω—ã–π",
	"climate_polluted":  "–ó–∞–≥—Ä—è–∑–Ω—ë–Ω–Ω—ã–π (–≥–æ—Ä–æ–¥, —Å–º–æ–≥, –ø—ã–ª—å)",
	"climate_multiple":  "–ñ–∏–≤—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–º–∞—Ç–∞—Ö (–ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é/–ø–µ—Ä–µ–µ–∑–¥—ã)",
	"climate_unknown":   "–ù–µ –∑–Ω–∞—é",

	// –¢–∏–ø –∫–æ–∂–∏ –ø–æ –§–∏—Ü–ø–∞—Ç—Ä–∏–∫—É
	"fitzpatrick_1":       "I ‚Äì –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è, –≤—Å–µ–≥–¥–∞ –æ–±–≥–æ—Ä–∞–µ—Ç",
	"fitzpatrick_2":       "II ‚Äì —Å–≤–µ—Ç–ª–∞—è, –æ–±–≥–æ—Ä–∞–µ—Ç, –Ω–æ –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–∞—Ç—å",
	"fitzpatrick_3":       "III ‚Äì —Å–≤–µ—Ç–ª–æ-—Å–º—É–≥–ª–∞—è, –ª–µ–≥–∫–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
	"fitzpatrick_4":       "IV ‚Äì —Å–º—É–≥–ª–∞—è, —Ä–µ–¥–∫–æ –æ–±–≥–æ—Ä–∞–µ—Ç",
	"fitzpatrick_5":       "V ‚Äì —Ç—ë–º–Ω–∞—è, –ø–æ—á—Ç–∏ –Ω–µ –æ–±–≥–æ—Ä–∞–µ—Ç",
	"fitzpatrick_6":       "VI ‚Äì –æ—á–µ–Ω—å —Ç—ë–º–Ω–∞—è, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–≥–æ—Ä–∞–µ—Ç",
	"fitzpatrick_unknown": "–ù–µ –∑–Ω–∞—é / –ù–µ —Ö–æ—á—É —É–∫–∞–∑—ã–≤–∞—Ç—å",

	// –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
	"lifestyle_stress":   "–ß–∞—Å—Ç—ã–µ —Å—Ç—Ä–µ—Å—Å—ã",
	"lifestyle_sleep":    "–ù–µ–¥–æ—Å—ã–ø / —Å–±–∏—Ç—ã–π —Ä–µ–∂–∏–º",
	"lifestyle_screen":   "–ú–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
	"lifestyle_sweat":    "–ß–∞—Å—Ç–æ –ø–æ—Ç–µ—é (—Å–ø–æ—Ä—Ç, –∂–∞—Ä–∞ –∏ —Ç.–¥.)",
	"lifestyle_computer": "–†–∞–±–æ—Ç–∞—é –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º",
	"lifestyle_active":   "–ê–∫—Ç–∏–≤–Ω–æ –¥–≤–∏–≥–∞—é—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è",
	"lifestyle_outdoor":  "–†–µ–≥—É–ª—è—Ä–Ω–æ –Ω–∞ —É–ª–∏—Ü–µ",
	"lifestyle_passive":  "–ü–∞—Å—Å–∏–≤–Ω—ã–π / –¥–æ–º–∞—à–Ω–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
	"lifestyle_other":    "–î—Ä—É–≥–æ–µ",

	// –ü–∏—Ç–∞–Ω–∏–µ
	"diet_vegan":       "–í–µ–≥–∞–Ω—Å—Ç–≤–æ",
	"diet_vegetarian":  "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ",
	"diet_halal":       "–•–∞–ª—è–ª—å",
	"diet_keto":        "–ö–µ—Ç–æ / –ü–∞–ª–µ–æ / –ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–∞—è",
	"diet_gluten_free": "–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–∞—è",
	"diet_no_alcohol":  "–Ø –∏–∑–±–µ–≥–∞—é —Å–ø–∏—Ä—Ç–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ",
	"diet_no_animal":   "–Ø –∏–∑–±–µ–≥–∞—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è",
	"diet_none":        "–ù–µ—Ç –æ—Å–æ–±—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
	"diet_other":       "–î—Ä—É–≥–æ–µ",
}

// convertToHumanReadable –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func convertToHumanReadable(value string) string {
	if humanReadable, exists := valueMapping[value]; exists {
		return humanReadable
	}
	return value // –ï—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}

// formatRecommendationForTelegram —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
func formatRecommendationForTelegram(text string) string {
	// –ó–∞–º–µ–Ω—è–µ–º Markdown —Ä–∞–∑–º–µ—Ç–∫—É –Ω–∞ Telegram —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	formatted := text

	// –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
	formatted = strings.ReplaceAll(formatted, "**", "<b>")

	// –ó–∞–º–µ–Ω—è–µ–º –∫—É—Ä—Å–∏–≤
	formatted = strings.ReplaceAll(formatted, "*", "<i>")

	// –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	formatted = strings.ReplaceAll(formatted, "### ", "üîπ <b>")
	formatted = strings.ReplaceAll(formatted, "#### ", "üî∏ <b>")
	formatted = strings.ReplaceAll(formatted, "## ", "üîπ <b>")
	formatted = strings.ReplaceAll(formatted, "# ", "üîπ <b>")

	// –ó–∞–º–µ–Ω—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
	formatted = strings.ReplaceAll(formatted, "---", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
	formatted = strings.ReplaceAll(formatted, "--", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

	// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
	formatted = strings.ReplaceAll(formatted, "1. ", "1Ô∏è‚É£ ")
	formatted = strings.ReplaceAll(formatted, "2. ", "2Ô∏è‚É£ ")
	formatted = strings.ReplaceAll(formatted, "3. ", "3Ô∏è‚É£ ")
	formatted = strings.ReplaceAll(formatted, "4. ", "4Ô∏è‚É£ ")
	formatted = strings.ReplaceAll(formatted, "5. ", "5Ô∏è‚É£ ")
	formatted = strings.ReplaceAll(formatted, "6. ", "6Ô∏è‚É£ ")
	formatted = strings.ReplaceAll(formatted, "7. ", "7Ô∏è‚É£ ")
	formatted = strings.ReplaceAll(formatted, "8. ", "8Ô∏è‚É£ ")
	formatted = strings.ReplaceAll(formatted, "9. ", "9Ô∏è‚É£ ")

	// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤
	formatted = strings.ReplaceAll(formatted, "   * ", "   ‚Ä¢ ")
	formatted = strings.ReplaceAll(formatted, "   - ", "   ‚Ä¢ ")

	// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤
	formatted = strings.ReplaceAll(formatted, "–ó–∞—á–µ–º:", "üí° <b>–ó–∞—á–µ–º:</b>")
	formatted = strings.ReplaceAll(formatted, "–°—Ä–µ–¥—Å—Ç–≤–æ:", "üß¥ <b>–°—Ä–µ–¥—Å—Ç–≤–æ:</b>")
	formatted = strings.ReplaceAll(formatted, "–¢–∏–ø –∫–æ–∂–∏:", "üë§ <b>–¢–∏–ø –∫–æ–∂–∏:</b>")
	formatted = strings.ReplaceAll(formatted, "–¶–µ–ª—å:", "üéØ <b>–¶–µ–ª—å:</b>")

	// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤ —É—Ö–æ–¥–∞
	formatted = strings.ReplaceAll(formatted, "–û—á–∏—â–µ–Ω–∏–µ", "üßº <b>–û—á–∏—â–µ–Ω–∏–µ</b>")
	formatted = strings.ReplaceAll(formatted, "–¢–æ–Ω–∏–∫", "üíß <b>–¢–æ–Ω–∏–∫</b>")
	formatted = strings.ReplaceAll(formatted, "–ê–∫—Ç–∏–≤–Ω—ã–π —É—Ö–æ–¥", "‚ö° <b>–ê–∫—Ç–∏–≤–Ω—ã–π —É—Ö–æ–¥</b>")
	formatted = strings.ReplaceAll(formatted, "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "üíß <b>–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ</b>")
	formatted = strings.ReplaceAll(formatted, "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞", "‚òÄÔ∏è <b>–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞</b>")
	formatted = strings.ReplaceAll(formatted, "–î–≤–æ–π–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ", "üîÑ <b>–î–≤–æ–π–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ</b>")

	// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
	formatted = strings.ReplaceAll(formatted, "–£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥", "üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥</b>")
	formatted = strings.ReplaceAll(formatted, "–í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥", "üåô <b>–í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥</b>")

	// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
	formatted = strings.ReplaceAll(formatted, "—Å–∞–ª–∏—Ü–∏–ª–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "<b>—Å–∞–ª–∏—Ü–∏–ª–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞</b>")
	formatted = strings.ReplaceAll(formatted, "–Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥", "<b>–Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥</b>")
	formatted = strings.ReplaceAll(formatted, "–≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "<b>–≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞</b>")
	formatted = strings.ReplaceAll(formatted, "–∞–∑—É–ª–∞–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "<b>–∞–∑—É–ª–∞–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞</b>")
	formatted = strings.ReplaceAll(formatted, "–æ–∫—Å–∏–¥ —Ü–∏–Ω–∫–∞", "<b>–æ–∫—Å–∏–¥ —Ü–∏–Ω–∫–∞</b>")

	// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–µ–≥–∏
	formatted = strings.ReplaceAll(formatted, "<b><b>", "<b>")
	formatted = strings.ReplaceAll(formatted, "</b></b>", "</b>")
	formatted = strings.ReplaceAll(formatted, "<i><i>", "<i>")
	formatted = strings.ReplaceAll(formatted, "</i></i>", "</i>")

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤
	formatted = validateAndFixHTMLTags(formatted)

	return formatted
}

// validateAndFixHTMLTags –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç HTML —Ç–µ–≥–∏
func validateAndFixHTMLTags(text string) string {
	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
	bOpenCount := strings.Count(text, "<b>")
	bCloseCount := strings.Count(text, "</b>")
	iOpenCount := strings.Count(text, "<i>")
	iCloseCount := strings.Count(text, "</i>")

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
	if bOpenCount > bCloseCount {
		text += strings.Repeat("</b>", bOpenCount-bCloseCount)
	}
	if iOpenCount > iCloseCount {
		text += strings.Repeat("</i>", iOpenCount-iCloseCount)
	}

	return text
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func Run(token, openRouterAPIKey string) error {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
	recommendationService = services.NewRecommendationService(openRouterAPIKey)
	log.Printf("–°–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil && update.InlineQuery == nil {
			continue
		}

		if update.Message != nil {
			handleMessage(bot, update.Message)
		}

		if update.CallbackQuery != nil {
			handleCallbackQuery(bot, update.CallbackQuery)
		}

		if update.InlineQuery != nil {
			handleInlineQuery(bot, update.InlineQuery)
		}
	}

	return nil
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	text := message.Text

	log.Printf("[%s] %s", message.From.UserName, text)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if message.IsCommand() {
		handleCommand(bot, message)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL
	if strings.Contains(text, "incidecoder.com") {
		handleIncidecoderURL(bot, message)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
	handleFormInput(bot, message)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func handleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	command := message.Command()

	switch command {
	case "start":
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/01.png"))
		photo.Caption = `‚ú® –Ø ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –±—å—é—Ç–∏-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–∞–∫–æ–Ω–µ—Ü –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –∫–æ—Å–º–µ—Ç–∏—á–∫–µ. –≠—Ç–æ—Ç –±–æ—Ç - —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ Cos AI, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π.
–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∫–µ—Ç—ã üí¨üëá`
		photo.ParseMode = "HTML"

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìã –ê–Ω–∫–µ—Ç–∞", "start_form"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "recommendations"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üß¥ –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", "my_products"),
			),
		)
		photo.ReplyMarkup = keyboard
		bot.Send(photo)

	case "help":
		helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/form - –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ø–æ–¥–±–æ—Ä–∞ —É—Ö–æ–¥–∞
/myproducts - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã

üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline —Ä–µ–∂–∏–º:
@cosmetics_lab_ai_bot add [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞]`
		msg := tgbotapi.NewMessage(chatID, helpText)
		bot.Send(msg)

	case "form":
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
		newState := &models.UserState{Step: 1}
		saveUserState(chatID, newState)
		ShowSkincareFormStep(bot, chatID, 1)

	case "myproducts":
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		handleMyProductsCommand(bot, message)

	default:
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
		bot.Send(msg)
	}
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
func handleCallbackQuery(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	log.Printf("[CALLBACK] %s: %s", callback.From.UserName, data)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMessage(bot, chatID, callback.Message.MessageID)

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackAnswer := tgbotapi.NewCallback(callback.ID, "")
	bot.Request(callbackAnswer)

	switch {
	case data == "start_form":
		handleAnketa(bot, callback)

	case strings.HasPrefix(data, "skin_") || strings.HasPrefix(data, "age_") ||
		strings.HasPrefix(data, "gender_") || strings.HasPrefix(data, "pregnancy_") ||
		strings.HasPrefix(data, "goal_") || strings.HasPrefix(data, "climate_") ||
		strings.HasPrefix(data, "fitzpatrick_") || strings.HasPrefix(data, "lifestyle_") ||
		strings.HasPrefix(data, "diet_") || strings.HasPrefix(data, "allergies_"):
		handleFormCallback(bot, callback)

	case strings.HasPrefix(data, "product_"):
		handleProductSelection(bot, callback)

	case strings.HasPrefix(data, "add_product_"):
		handleAddProductToCollection(bot, callback)

	case strings.HasPrefix(data, "remove_product_"):
		handleRemoveProductFromCollection(bot, callback)

	case data == "recommendations":
		handleRecommendations(bot, callback)

	case data == "recommendations_anketa":
		handleRecommendationsAnketa(bot, callback)

	case data == "recommendations_products":
		handleRecommendationsProducts(bot, callback)

	case data == "recommendations_general":
		handleRecommendationsGeneral(bot, callback)

	case data == "my_products":
		handleMyProducts(bot, callback)

	case data == "delete_products":
		handleDeleteProducts(bot, callback)

	case data == "delete_anketa":
		handleDeleteAnketa(bot, callback)

	case data == "retake_anketa":
		// –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ
		delete(userStates, chatID)
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
		newState := &models.UserState{Step: 1}
		saveUserState(chatID, newState)
		ShowSkincareFormStep(bot, chatID, 1)

	case data == "start_form_new":
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
		newState := &models.UserState{Step: 1}
		saveUserState(chatID, newState)
		ShowSkincareFormStep(bot, chatID, 1)

	case data == "back_to_start":
		handleBackToStart(bot, callback)

	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: %s", data)
	}
}

// handleFormCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É
func handleFormCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", chatID, data)

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å fallback)
	state := getUserState(chatID)
	log.Printf("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —à–∞–≥ %d", chatID, state.Step)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞
	switch {
	case strings.HasPrefix(data, "skin_"):
		state.SkinType = data
		state.Step = 2
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∫–æ–∂–∏: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 2", chatID, data)
	case strings.HasPrefix(data, "age_"):
		state.Age = data
		state.Step = 3
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 3", chatID, data)
	case strings.HasPrefix(data, "gender_"):
		state.Gender = data
		// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –º—É–∂—Å–∫–æ–π –ø–æ–ª, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏
		if data == "gender_male" {
			state.Pregnancy = "none_of_above"
			state.Step = 5 // –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤–æ–ø—Ä–æ—Å—É –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª –ø–æ–ª: %s, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 5", chatID, data)
		} else {
			state.Step = 4 // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª –ø–æ–ª: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 4", chatID, data)
		}
	case strings.HasPrefix(data, "pregnancy_"):
		state.Pregnancy = data
		state.Step = 5
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 5", chatID, data)
	case strings.HasPrefix(data, "goal_"):
		state.Goal = data
		state.Step = 7
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 7", chatID, data)
	case strings.HasPrefix(data, "climate_"):
		state.Climate = data
		state.Step = 8
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª –∫–ª–∏–º–∞—Ç: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 8", chatID, data)
	case strings.HasPrefix(data, "fitzpatrick_"):
		state.Fitzpatrick = data
		state.Step = 9
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∫–æ–∂–∏ –ø–æ –§–∏—Ü–ø–∞—Ç—Ä–∏–∫—É: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 9", chatID, data)
	case strings.HasPrefix(data, "lifestyle_"):
		state.Lifestyle = data
		state.Step = 10
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 10", chatID, data)
	case strings.HasPrefix(data, "diet_"):
		state.Diet = data
		state.Step = 11
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª –ø–∏—Ç–∞–Ω–∏–µ: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 11", chatID, data)
	case strings.HasPrefix(data, "allergies_"):
		state.Allergies = data
		state.Step = 12
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª –∞–ª–ª–µ—Ä–≥–∏–∏: %s, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ—Ä–º—É", chatID, data)
		// –§–æ—Ä–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
		showFormResults(bot, callback.Message, state)
		return
	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: %s", data)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å fallback)
	saveUserState(chatID, state)
	log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: —à–∞–≥ %d", chatID, state.Step)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
	ShowSkincareFormStep(bot, chatID, state.Step)
}

// handleFormInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É
func handleFormInput(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	text := message.Text

	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: '%s'", chatID, text)

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å fallback)
	state := getUserState(chatID)
	log.Printf("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —à–∞–≥ %d, Concerns: '%s'", chatID, state.Step, state.Concerns)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
	if state.Step == 0 {
		// –ù–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã (—à–∞–≥ 0)", chatID)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
	switch state.Step {
	case 5:
		state.Concerns = text
		state.Step = 6
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤–≤–µ–ª –ø—Ä–æ–±–ª–µ–º—ã: %s, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 6", chatID, text)
	default:
		// –ù–µ –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ —à–∞–≥–µ %d, –Ω–æ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è", chatID, state.Step)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å fallback)
	saveUserState(chatID, state)
	log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: —à–∞–≥ %d", chatID, state.Step)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
	log.Printf("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ %d –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", state.Step, chatID)
	ShowSkincareFormStep(bot, chatID, state.Step)
}

// showFormResults –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
func showFormResults(bot *tgbotapi.BotAPI, message *tgbotapi.Message, state *models.UserState) {
	chatID := message.Chat.ID

	resultText := fmt.Sprintf(`‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:

üë§ –¢–∏–ø –∫–æ–∂–∏: %s
üìÖ –í–æ–∑—Ä–∞—Å—Ç: %s
üöª –ü–æ–ª: %s
ü§± –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å/–ª–∞–∫—Ç–∞—Ü–∏—è: %s
üí≠ –ü—Ä–æ–±–ª–µ–º—ã: %s
üéØ –¶–µ–ª—å: %s
üåç –ö–ª–∏–º–∞—Ç: %s
‚òÄÔ∏è –¢–∏–ø –∫–æ–∂–∏ –ø–æ –§–∏—Ü–ø–∞—Ç—Ä–∏–∫—É: %s
üèÉ –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: %s
ü•ó –ü–∏—Ç–∞–Ω–∏–µ: %s
‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏: %s

–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞!`,
		convertToHumanReadable(state.SkinType),
		convertToHumanReadable(state.Age),
		convertToHumanReadable(state.Gender),
		convertToHumanReadable(state.Pregnancy),
		state.Concerns, // —É–∂–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
		convertToHumanReadable(state.Goal),
		convertToHumanReadable(state.Climate),
		convertToHumanReadable(state.Fitzpatrick),
		convertToHumanReadable(state.Lifestyle),
		convertToHumanReadable(state.Diet),
		convertToHumanReadable(state.Allergies))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∫–µ—Ç—ã
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/12.png"))
	photo.Caption = resultText
	photo.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "delete_anketa"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", "retake_anketa"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_start"),
		),
	)
	photo.ReplyMarkup = keyboard
	bot.Send(photo)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –≤ API
	log.Printf("–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", chatID)
	saveUserState(chatID, state)
}

// handleIncidecoderURL –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL —Å Incidecoder
func handleIncidecoderURL(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	msg := tgbotapi.NewMessage(chatID, "–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å Incidecoder...")
	bot.Send(msg)

	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ API –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
	// –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
	infoMsg := tgbotapi.NewMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å Incidecoder –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")
	bot.Send(infoMsg)
}

// handleProductSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
func handleProductSelection(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
	productIDStr := strings.TrimPrefix(data, "product_")
	productID, err := strconv.Atoi(productIDStr)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")
		bot.Send(errorMsg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ —á–µ—Ä–µ–∑ API
	product, err := database.GetProduct(productID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: %v", err))
		bot.Send(errorMsg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ
	var productText strings.Builder
	productText.WriteString(fmt.Sprintf("üß¥ <b>%s %s</b>\n\n", product.Brand, product.Title))

	if product.Details != "" {
		productText.WriteString(fmt.Sprintf("üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n%s\n\n", product.Details))
	}

	if len(product.Ingredients) > 0 {
		productText.WriteString("üß™ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n")
		for i, ingredient := range product.Ingredients {
			if i >= 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
				productText.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", len(product.Ingredients)-10))
				break
			}
			productText.WriteString(fmt.Sprintf("‚Ä¢ %s\n", ingredient.Name))
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é", fmt.Sprintf("add_product_%d", product.ID)),
		),
	)

	msg := tgbotapi.NewMessage(chatID, productText.String())
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// handleAddProductToCollection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleAddProductToCollection(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
	productIDStr := strings.TrimPrefix(data, "add_product_")
	productID, err := strconv.Atoi(productIDStr)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")
		bot.Send(errorMsg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	err = database.AddUserProduct(chatID, productID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: %v", err))
		bot.Send(errorMsg)
		return
	}

	successMsg := tgbotapi.NewMessage(chatID, "‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!")
	bot.Send(successMsg)
}

// handleRemoveProductFromCollection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleRemoveProductFromCollection(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
	productIDStr := strings.TrimPrefix(data, "remove_product_")
	productID, err := strconv.Atoi(productIDStr)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞")
		bot.Send(errorMsg)
		return
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	err = database.RemoveUserProduct(chatID, productID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: %v", err))
		bot.Send(errorMsg)
		return
	}

	successMsg := tgbotapi.NewMessage(chatID, "‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!")
	bot.Send(successMsg)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	handleMyProducts(bot, callback)
}

// handleRecommendations –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
func handleRecommendations(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/04.png"))
	photo.Caption = `ü§ñ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

–ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã, —Ç–≤–æ–∏—Ö —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ —Ç–≤–æ–µ–º —É—Ö–æ–¥–µ.

<i>–î–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞ –∏ –Ω–µ —Å—Ç–∞–≤—è—Ç —Ç–æ—á–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã.</i>`
	photo.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã", "recommendations_anketa"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üß¥ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –º–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "recommendations_products"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üß© –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "recommendations_general"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_start"),
		),
	)
	photo.ReplyMarkup = keyboard
	bot.Send(photo)
}

// handleRecommendationsAnketa –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã
func handleRecommendationsAnketa(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
	loadingMsg := tgbotapi.NewMessage(chatID, "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	bot.Send(loadingMsg)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	recommendations, err := recommendationService.GetAnketaRecommendations(chatID)
	if err != nil {
		var errorText string
		if strings.Contains(err.Error(), "timeout") || strings.Contains(err.Error(), "deadline exceeded") {
			errorText = "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
		} else if strings.Contains(err.Error(), "401") {
			errorText = "üîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API."
		} else {
			errorText = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: %v", err)
		}
		errorMsg := tgbotapi.NewMessage(chatID, errorText)

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞" –¥–ª—è –æ—à–∏–±–æ–∫ —Ç–∞–π–º–∞—É—Ç–∞
		if strings.Contains(err.Error(), "timeout") || strings.Contains(err.Error(), "deadline exceeded") {
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "recommendations_anketa"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º", "recommendations"),
				),
			)
			errorMsg.ReplyMarkup = keyboard
		} else {
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º", "recommendations"),
				),
			)
			errorMsg.ReplyMarkup = keyboard
		}

		bot.Send(errorMsg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	formattedRecommendations := formatRecommendationForTelegram(recommendations)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìä <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n%s", formattedRecommendations))
	msg.ParseMode = "HTML"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º", "recommendations"),
		),
	)
	msg.ReplyMarkup = keyboard

	// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å HTML –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: %v", err)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		plainMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã\n\n%s", recommendations))
		plainMsg.ReplyMarkup = keyboard
		bot.Send(plainMsg)
	}
}

// handleRecommendationsProducts –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
func handleRecommendationsProducts(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
	loadingMsg := tgbotapi.NewMessage(chatID, "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	bot.Send(loadingMsg)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	recommendations, err := recommendationService.GetProductsRecommendations(chatID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: %v", err))
		bot.Send(errorMsg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	formattedRecommendations := formatRecommendationForTelegram(recommendations)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üß¥ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –º–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>\n\n%s", formattedRecommendations))
	msg.ParseMode = "HTML"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º", "recommendations"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// handleRecommendationsGeneral –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
func handleRecommendationsGeneral(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
	loadingMsg := tgbotapi.NewMessage(chatID, "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	bot.Send(loadingMsg)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	recommendations, err := recommendationService.GetGeneralRecommendations(chatID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: %v", err))
		bot.Send(errorMsg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	formattedRecommendations := formatRecommendationForTelegram(recommendations)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üß© <b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n%s", formattedRecommendations))
	msg.ParseMode = "HTML"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º", "recommendations"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// handleMyProducts –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleMyProducts(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
	loadingMsg := tgbotapi.NewMessage(chatID, "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã...")
	bot.Send(loadingMsg)

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	products, err := database.GetUserProducts(chatID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: %v", err))
		bot.Send(errorMsg)
		return
	}

	if len(products) == 0 {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/08.png"))
		photo.Caption = `üß¥ <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.

<b>–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ:</b>
@cosmetics_lab_ai_bot add [–ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏]

<b>–ü—Ä–∏–º–µ—Ä:</b>
@cosmetics_lab_ai_bot add Repair Sunscreen SPF 50`
		photo.ParseMode = "HTML"

		// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_start"),
			),
		)
		photo.ReplyMarkup = keyboard
		bot.Send(photo)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	var productsText strings.Builder
	productsText.WriteString(fmt.Sprintf("üß¥ <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è (%d –ø—Ä–æ–¥—É–∫—Ç–æ–≤)</b>\n\n", len(products)))
	productsText.WriteString("üí° <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ:</b>\n@cosmetics_lab_ai_bot add [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞]\n\n")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	for i, product := range products {
		if i >= 10 {
			productsText.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n", len(products)-10))
			break
		}

		productsText.WriteString(fmt.Sprintf("üî∏ <b>%s %s</b>\n", product.Brand, product.Title))

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
		if product.Details != "" {
			// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
			details := product.Details
			if len(details) > 100 {
				details = details[:97] + "..."
			}
			productsText.WriteString(fmt.Sprintf("   üìù %s\n", details))
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
		if product.AddedAt != "" {
			productsText.WriteString(fmt.Sprintf("   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: %s\n", product.AddedAt))
		}

		productsText.WriteString("\n")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/02.png"))
	photo.Caption = productsText.String()
	photo.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", "delete_products"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_start"),
		),
	)
	photo.ReplyMarkup = keyboard
	bot.Send(photo)
}

// handleMyProductsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /myproducts
func handleMyProductsCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
	loadingMsg := tgbotapi.NewMessage(chatID, "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã...")
	bot.Send(loadingMsg)

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	products, err := database.GetUserProducts(chatID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: %v", err))
		bot.Send(errorMsg)
		return
	}

	if len(products) == 0 {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/08.png"))
		photo.Caption = `üß¥ <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.

<b>–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ:</b>
@cosmetics_lab_ai_bot add [–ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏]

<b>–ü—Ä–∏–º–µ—Ä:</b>
@cosmetics_lab_ai_bot add Repair Sunscreen SPF 50`
		photo.ParseMode = "HTML"
		bot.Send(photo)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	var productsText strings.Builder
	productsText.WriteString(fmt.Sprintf("üß¥ <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è (%d –ø—Ä–æ–¥—É–∫—Ç–æ–≤)</b>\n\n", len(products)))
	productsText.WriteString("üí° <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ:</b>\n@cosmetics_lab_ai_bot add [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞]\n\n")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	for i, product := range products {
		if i >= 10 {
			productsText.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n", len(products)-10))
			break
		}

		productsText.WriteString(fmt.Sprintf("üî∏ <b>%s %s</b>\n", product.Brand, product.Title))

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
		if product.Details != "" {
			// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
			details := product.Details
			if len(details) > 100 {
				details = details[:97] + "..."
			}
			productsText.WriteString(fmt.Sprintf("   üìù %s\n", details))
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
		if product.AddedAt != "" {
			productsText.WriteString(fmt.Sprintf("   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: %s\n", product.AddedAt))
		}

		productsText.WriteString("\n")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/02.png"))
	photo.Caption = productsText.String()
	photo.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", "delete_products"),
		),
	)
	photo.ReplyMarkup = keyboard
	bot.Send(photo)
}

// handleDeleteProducts –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
func handleDeleteProducts(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	products, err := database.GetUserProducts(chatID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: %v", err))
		bot.Send(errorMsg)
		return
	}

	if len(products) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üß¥ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	var productsText strings.Builder
	productsText.WriteString(fmt.Sprintf("üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (%d –ø—Ä–æ–¥—É–∫—Ç–æ–≤):</b>\n\n", len(products)))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	for i, product := range products {
		if i >= 10 {
			productsText.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n", len(products)-10))
			break
		}

		productsText.WriteString(fmt.Sprintf("üî∏ <b>%s %s</b>\n", product.Brand, product.Title))
	}

	msg := tgbotapi.NewMessage(chatID, productsText.String())
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i, product := range products {
		if i >= 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
			break
		}
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üóëÔ∏è %s %s", product.Brand, product.Title),
			fmt.Sprintf("remove_product_%d", product.ProductID),
		)
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(button))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º", "my_products"),
	))

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	bot.Send(msg)
}

// handleAnketa –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ê–Ω–∫–µ—Ç–∞"
func handleAnketa(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	log.Printf("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —á–µ—Ä–µ–∑ API", chatID)

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	profile, err := database.GetUserProfile(chatID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", chatID, err)
		// –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
		msg := tgbotapi.NewMessage(chatID, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.\n\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π!")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "start_form_new"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_start"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
	log.Printf("–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: SkinType='%s', Age='%s', Gender='%s', Pregnancy='%s', Concern='%s', Goal='%s', Climate='%s', Fitzpatrick='%s', Lifestyle='%s', Diet='%s', Allergy='%s'",
		chatID, profile.SkinType, profile.Age, profile.Gender, profile.Pregnancy, profile.Concern, profile.Goal, profile.Climate, profile.Fitzpatrick, profile.Lifestyle, profile.Diet, profile.Allergy)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞–Ω–∫–µ—Ç–∞ (–µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ)
	if profile.SkinType == "" && profile.Age == "" && profile.Gender == "" &&
		profile.Pregnancy == "" && profile.Concern == "" && profile.Goal == "" &&
		profile.Climate == "" && profile.Fitzpatrick == "" && profile.Lifestyle == "" &&
		profile.Diet == "" && profile.Allergy == "" {
		// –ê–Ω–∫–µ—Ç–∞ –ø—É—Å—Ç–∞—è
		log.Printf("–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –ø—É—Å—Ç–∞—è", chatID)
		msg := tgbotapi.NewMessage(chatID, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.\n\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π!")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "start_form_new"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_start"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	// –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	log.Printf("–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", chatID)
	var anketaText strings.Builder
	anketaText.WriteString("üìã <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:</b>\n\n")

	if profile.SkinType != "" {
		anketaText.WriteString(fmt.Sprintf("üë§ <b>–¢–∏–ø –∫–æ–∂–∏:</b> %s\n", profile.SkinType))
	}
	if profile.Age != "" {
		anketaText.WriteString(fmt.Sprintf("üìÖ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> %s\n", profile.Age))
	}
	if profile.Gender != "" {
		anketaText.WriteString(fmt.Sprintf("üöª <b>–ü–æ–ª:</b> %s\n", profile.Gender))
	}
	if profile.Pregnancy != "" {
		anketaText.WriteString(fmt.Sprintf("ü§± <b>–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å/–ª–∞–∫—Ç–∞—Ü–∏—è:</b> %s\n", profile.Pregnancy))
	}
	if profile.Concern != "" {
		anketaText.WriteString(fmt.Sprintf("üí≠ <b>–ü—Ä–æ–±–ª–µ–º—ã:</b> %s\n", profile.Concern))
	}
	if profile.Goal != "" {
		anketaText.WriteString(fmt.Sprintf("üéØ <b>–¶–µ–ª—å:</b> %s\n", profile.Goal))
	}
	if profile.Climate != "" {
		anketaText.WriteString(fmt.Sprintf("üåç <b>–ö–ª–∏–º–∞—Ç:</b> %s\n", profile.Climate))
	}
	if profile.Fitzpatrick != "" {
		anketaText.WriteString(fmt.Sprintf("‚òÄÔ∏è <b>–¢–∏–ø –∫–æ–∂–∏ –ø–æ –§–∏—Ç—Ü–ø–∞—Ç—Ä–∏–∫—É:</b> %s\n", profile.Fitzpatrick))
	}
	if profile.Lifestyle != "" {
		anketaText.WriteString(fmt.Sprintf("üèÉ <b>–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:</b> %s\n", profile.Lifestyle))
	}
	if profile.Diet != "" {
		anketaText.WriteString(fmt.Sprintf("ü•ó <b>–ü–∏—Ç–∞–Ω–∏–µ:</b> %s\n", profile.Diet))
	}
	if profile.Allergy != "" {
		anketaText.WriteString(fmt.Sprintf("‚ö†Ô∏è <b>–ê–ª–ª–µ—Ä–≥–∏–∏:</b> %s\n", profile.Allergy))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/12.png"))
	photo.Caption = anketaText.String()
	photo.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "delete_anketa"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", "retake_anketa"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_start"),
		),
	)
	photo.ReplyMarkup = keyboard
	bot.Send(photo)
}

// handleDeleteAnketa –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
func handleDeleteAnketa(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	delete(userStates, chatID)

	// –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	err := database.EmptyUserProfile(chatID)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã: %v", err))
		bot.Send(errorMsg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
	msg := tgbotapi.NewMessage(chatID, "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_start"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// handleBackToStart –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
func handleBackToStart(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–∞–∫ –≤ /start)
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("images/01.png"))
	photo.Caption = `‚ú® –Ø ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –±—å—é—Ç–∏-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–∞–∫–æ–Ω–µ—Ü –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –∫–æ—Å–º–µ—Ç–∏—á–∫–µ. –≠—Ç–æ—Ç –±–æ—Ç - —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ Cos AI, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π.
–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∫–µ—Ç—ã üí¨üëá`
	photo.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ê–Ω–∫–µ—Ç–∞", "start_form"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "recommendations"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üß¥ –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", "my_products"),
		),
	)
	photo.ReplyMarkup = keyboard
	bot.Send(photo)
}

// getUserState –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
func getUserState(chatID int64) *models.UserState {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã)
	if localState, exists := userStates[chatID]; exists {
		log.Printf("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —à–∞–≥ %d", chatID, localState.Step)
		return localState
	}

	// –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
	state, err := database.GetUserState(chatID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ API, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ: %v", err)
		// –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		return &models.UserState{Step: 0}
	}
	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —à–∞–≥ %d", chatID, state.Step)
	return state
}

// saveUserState —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
func saveUserState(chatID int64, state *models.UserState) {
	// –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
	userStates[chatID] = state
	log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: —à–∞–≥ %d", chatID, state.Step)

	// –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ API (–¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
	if err := database.SaveUserState(chatID, state); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ API: %v", err)
	} else {
		log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ API: —à–∞–≥ %d", chatID, state.Step)
	}
}

// handleInlineQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline –∑–∞–ø—Ä–æ—Å—ã
func handleInlineQuery(bot *tgbotapi.BotAPI, inlineQuery *tgbotapi.InlineQuery) {
	query := inlineQuery.Query
	userID := inlineQuery.From.ID

	log.Printf("[INLINE] –ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: '%s'", userID, query)
	log.Printf("[INLINE] –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞: ID=%s, Offset=%s", inlineQuery.ID, inlineQuery.Offset)

	// –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –µ—Å—Ç—å, –≤–∫–ª—é—á–∞—è "add"
	log.Printf("[INLINE] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '%s'", query)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞
	if len(query) < 3 {
		log.Printf("[INLINE] –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (%d —Å–∏–º–≤–æ–ª–æ–≤), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ", len(query))
		// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –∫–æ—Ä–æ—Ç–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ
		result := tgbotapi.NewInlineQueryResultArticle(
			"too_short",
			"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π",
			"–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
		)
		result.Description = "–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"

		answerInlineQuery := tgbotapi.InlineConfig{
			InlineQueryID: inlineQuery.ID,
			Results:       []interface{}{result},
		}
		bot.Request(answerInlineQuery)
		return
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API
	log.Printf("[INLINE] –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
	products, err := database.SearchProducts(query, 20, 0, nil, nil, nil, nil)
	if err != nil {
		log.Printf("[INLINE] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
		result := tgbotapi.NewInlineQueryResultArticle(
			"error",
			"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		)
		result.Description = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"

		answerInlineQuery := tgbotapi.InlineConfig{
			InlineQueryID: inlineQuery.ID,
			Results:       []interface{}{result},
		}
		bot.Request(answerInlineQuery)
		return
	}

	log.Printf("[INLINE] –ù–∞–π–¥–µ–Ω–æ %d –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '%s'", len(products), query)

	if len(products) == 0 {
		// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
		log.Printf("[INLINE] –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'")

		// –°–æ–∑–¥–∞–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
		result := tgbotapi.NewInlineQueryResultArticle(
			"not_found",
			"‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
			"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
		)
		result.Description = fmt.Sprintf("–ü–æ –∑–∞–ø—Ä–æ—Å—É '%s' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", query)

		answerInlineQuery := tgbotapi.InlineConfig{
			InlineQueryID: inlineQuery.ID,
			Results:       []interface{}{result},
		}
		bot.Request(answerInlineQuery)
		return
	}

	// –°–æ–∑–¥–∞–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	log.Printf("[INLINE] –°–æ–∑–¥–∞–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è %d –ø—Ä–æ–¥—É–∫—Ç–æ–≤", len(products))
	var results []interface{}
	for i, product := range products {
		log.Printf("[INLINE] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç %d: %s %s", i+1, product.Brand, product.Title)

		// –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏, –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)
		var description string
		if product.Details != "" {
			// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤)
			details := product.Details
			if len(details) > 200 {
				details = details[:197] + "..."
			}
			description = details
		}

		// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Å—Ç–∞—Ç—å—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
		result := tgbotapi.NewInlineQueryResultArticle(
			fmt.Sprintf("product_%d", product.ID),
			fmt.Sprintf("%s %s", product.Brand, product.Title),
			description,
		)
		result.Description = description
		result.ThumbURL = product.Image

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
		result.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{
					tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é", fmt.Sprintf("add_product_%d", product.ID)),
				},
			},
		}

		results = append(results, result)

		// –ï—Å–ª–∏ —É –Ω–∞—Å –º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		if i >= 9 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
			break
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ inline –∑–∞–ø—Ä–æ—Å
	log.Printf("[INLINE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", len(results))
	answerInlineQuery := tgbotapi.InlineConfig{
		InlineQueryID: inlineQuery.ID,
		Results:       results,
		CacheTime:     300, // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ 5 –º–∏–Ω—É—Ç
	}

	response, err := bot.Request(answerInlineQuery)
	if err != nil {
		log.Printf("[INLINE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ inline –æ—Ç–≤–µ—Ç–∞: %v", err)
	} else {
		log.Printf("[INLINE] Inline –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %+v", response)
	}
}
